<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pers.linhai.nature.j2ee.core.dao.IBaseMapper">

    <!-- 公共的结果映射类型 -->
    <resultMap id="BaseResultMap" type="EntityBean" />

    <!-- 添加 -->
    <insert id="save" parameterType="BaseEntity" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[
            insert into ${table}
        ]]>
        <foreach collection="persistentFieldMap" index="index" item="persistentField" open="(" separator=", " close=")">
            <![CDATA[
                ${persistentField.column}
            ]]>
        </foreach>
        <foreach collection="persistentFieldMap" index="index" item="persistentField" open="values (" separator=", " close=")">
            <![CDATA[
                #{persistentField.value, jdbcType=${persistentField.jdbcType}}
            ]]>
        </foreach>
    </insert>

    <!-- 根据查询条件删除 -->
    <delete id="delete" parameterType="BaseQuery">
        <![CDATA[
            delete from ${table}
        ]]>

        <!-- 添加动态自定义查询条件 -->
        <include refid="Common_Where" />
    </delete>

    <!-- 修改 -->
    <update id="update" parameterType="BaseEntity">
        <![CDATA[
            update ${table}
        ]]>
        <set>
            <foreach collection="persistentFieldMap" index="index" item="persistentField" open=" " separator=", " close=" ">
                <![CDATA[
                    ${persistentField.column} = #{persistentField.value, jdbcType=${persistentField.jdbcType}}
                ]]>
            </foreach>
        </set>

        <!-- 添加动态自定义条件 -->
        <include refid="Common_Where" />
    </update>

    <!-- mysql的分页语法支持 -->
    <!-- 组合查询函数，支持分页功能，resultSetType (可选配置) FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动） -->
    <!-- statementType (可选配置)，STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED -->
    <select id="find" parameterType="BaseQuery" resultMap="BaseResultMap" resultSetType="FORWARD_ONLY" statementType="PREPARED" databaseId="mysql">
        <include refid="Table_Query" />
        <if test="page != null and size != null">
            <![CDATA[
                limit ${offset}, ${size}
            ]]>
        </if>
    </select>

    <!-- oracle的分页语法支持 -->
    <!-- 组合查询函数，支持分页功能，resultSetType (可选配置) FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动） -->
    <!-- statementType (可选配置)，STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED -->
    <select id="find" parameterType="BaseQuery" resultMap="BaseResultMap" resultSetType="FORWARD_ONLY" statementType="PREPARED" databaseId="oracle">
        <if test="page != null and size != null">
            <![CDATA[
                select * from ( select row_.*, rownum rownum_ from (
            ]]>
        </if>
        <include refid="Table_Query" />
        <if test="page != null and size != null">
            <![CDATA[
                ) row_ where rownum <= (${offset} + ${size})) where rownum_ > ${offset}
            ]]>
        </if>
    </select>

    <!-- 统计数量 -->
    <select id="count" parameterType="BaseQuery" resultType="Long">
        <![CDATA[
            select count(*) as queryCount from ${table}
        ]]>

        <!-- 添加动态自定义查询条件 -->
        <include refid="Common_Where" />
    </select>
    
    <!-- 公共动态自定义查询条件 -->
    <sql id="Common_Where">
        <if test="where != null">
            <where>
                <foreach open=" " close=" " collection="where.conditionSegmentList" index="index" item="conditionSegment" separator=" ">
                    <choose>
                        <when test="conditionSegment.type == 1">
                            <![CDATA[
                                ${conditionSegment.column} ${conditionSegment.operator} #{conditionSegment.value, jdbcType=${conditionSegment.jdbcType}}
                            ]]>
                        </when>
                        <when test="conditionSegment.type == 2">
                            <![CDATA[
                                ${conditionSegment.column} ${conditionSegment.operator}
                            ]]>
                            <foreach collection="conditionSegment.valueList" index="index" item="value" open="(" separator=", " close=")">
                                <![CDATA[
                                    #{value, jdbcType=${conditionSegment.jdbcType}}
                                ]]>
                            </foreach>
                        </when>
                        <when test="conditionSegment.type == 3">
                            <![CDATA[
                                ${conditionSegment.column} ${conditionSegment.operator}
                            ]]>
                        </when>
                        <when test="conditionSegment.type == 4">
                            <![CDATA[
                                ${conditionSegment.segment}
                            ]]>
                        </when>
                        <otherwise></otherwise>
                    </choose>
                </foreach>
            </where>
        </if>
    </sql>
    
    <!-- 添加公共排序字段信息 -->
    <sql id="Common_Order">
        <if test="orderFieldList != null">
            <foreach collection="orderFieldList" index="index" item="orderField" open=" order by " separator=", " close=" ">
                <![CDATA[
                    ${orderField.column} ${orderField.direction}
                ]]>
            </foreach>
        </if>
    </sql>
    
    <!-- 通用的单表查询部分sql -->
    <sql id="Table_Query">
        <![CDATA[
            select
        ]]>

        <!-- 添加需要返回的字段信息 -->
        <foreach collection="selectColumnList" index="index" item="columnName" open=" " separator=", " close=" ">
            <![CDATA[
                ${columnName} as ${selectFieldList[index]}
            ]]>
        </foreach>
        
        <![CDATA[
            from ${table}
        ]]>

        <!-- 添加动态自定义查询条件 -->
        <include refid="Common_Where" />

        <!-- 添加排序字段信息 -->
        <include refid="Common_Order" />
    </sql>
</mapper>